<?xml version="1.0" encoding="UTF-8"?>
<neuroml xmlns="http://www.neuroml.org/schema/neuroml2"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.neuroml.org/schema/neuroml2 https://raw.github.com/NeuroML/NeuroML2/development/Schemas/NeuroML2/NeuroML_v2beta4.xsd"
    id = "NeuroML2_file_exported_from_NEURON">


    <include href="../channels/CavL.channel.nml"/>
    <include href="../channels/CavN.channel.nml"/>
    <include href="../channels/HCN.channel.nml"/> 
    <include href="../channels/KCaS.channel.nml"/> 
    <include href="../channels/Kdrfast.channel.nml"/> 
    <include href="../channels/KvA.channel.nml"/> 
    <include href="../channels/KvCaB.channel.nml"/> 
    <include href="../channels/KvGroup.channel.nml"/> 
    <include href="../channels/Navcck.channel.nml"/>
    <include href="../channels/leak_chan.channel.nml"/>
    <include href="../channels/Capool.nml"/>


  <cell id="scacell">
    <notes>Cell: scacell exported from NEURON ModelView</notes>
    <morphology id="morphology">
<!-- Section: scacell[0].soma[0] (segmentGroup: soma_0) which has 3 3D points, so 2 segment(s)-->
      <segment id="0" name = "Seg0_soma_0">
        <proximal x="0" y="10" z="0" diameter="10"/>
        <distal x="0" y="15" z="0" diameter="10"/>
      </segment>
      <segment id="2" name = "Seg1_soma_0">
        <parent segment="0"/>
        <distal x="0" y="20" z="0" diameter="10"/>
      </segment>
<!-- Section: scacell[0].dend[13] (segmentGroup: dend_13) which has 3 3D points, so 2 segment(s)-->
      <segment id="29" name = "Seg0_dend_13">  <!-- Connected at 0 on parent section: scacell[0].soma[0]  -->
        <parent segment="0" fractionAlong="0"/>
        <proximal x="0" y="10" z="0" diameter="2"/>
        <distal x="19.4709" y="-36.053" z="0" diameter="1.5"/>
      </segment>
      <segment id="30" name = "Seg1_dend_13">
        <parent segment="29"/>
        <distal x="38.9419" y="-82.1061" z="0" diameter="1.5"/>
      </segment>
<!-- Section: scacell[0].dend[10] (segmentGroup: dend_10) which has 3 3D points, so 2 segment(s)-->
      <segment id="23" name = "Seg0_dend_10">  <!-- Connected at 0 on parent section: scacell[0].soma[0]  -->
        <parent segment="0" fractionAlong="0"/>
        <proximal x="0" y="10" z="0" diameter="2"/>
        <distal x="-19.4709" y="-36.0531" z="0" diameter="1.5"/>
      </segment>
      <segment id="24" name = "Seg1_dend_10">
        <parent segment="23"/>
        <distal x="-38.9418" y="-82.1061" z="0" diameter="1.5"/>
      </segment>
<!-- Section: scacell[0].dend[5] (segmentGroup: dend_5) which has 3 3D points, so 2 segment(s)-->
      <segment id="13" name = "Seg0_dend_5">
        <parent segment="2"/>
        <proximal x="0" y="20" z="0" diameter="4"/>
        <distal x="-19.4709" y="66.053" z="0" diameter="3.5"/>
      </segment>
      <segment id="14" name = "Seg1_dend_5">
        <parent segment="13"/>
        <distal x="-38.9418" y="112.106" z="0" diameter="3.5"/>
      </segment>
<!-- Section: scacell[0].dend[0] (segmentGroup: dend_0) which has 3 3D points, so 2 segment(s)-->
      <segment id="3" name = "Seg0_dend_0">
        <parent segment="2"/>
        <proximal x="0" y="20" z="0" diameter="3.5"/>
        <distal x="19.4709" y="66.053" z="0" diameter="3.5"/>
      </segment>
      <segment id="4" name = "Seg1_dend_0">
        <parent segment="3"/>
        <distal x="38.9418" y="112.106" z="0" diameter="3.5"/>
      </segment>
<!-- Section: scacell[0].dend[14] (segmentGroup: dend_14) which has 3 3D points, so 2 segment(s)-->
      <segment id="31" name = "Seg0_dend_14">
        <parent segment="30"/>
        <proximal x="38.9419" y="-82.1061" z="0" diameter="1.2"/>
        <distal x="58.4128" y="-128.159" z="0" diameter="1.2"/>
      </segment>
      <segment id="32" name = "Seg1_dend_14">
        <parent segment="31"/>
        <distal x="77.8837" y="-174.212" z="0" diameter="1.2"/>
      </segment>
<!-- Section: scacell[0].dend[11] (segmentGroup: dend_11) which has 3 3D points, so 2 segment(s)-->
      <segment id="25" name = "Seg0_dend_11">
        <parent segment="24"/>
        <proximal x="-38.9418" y="-82.1061" z="0" diameter="1.2"/>
        <distal x="-58.4128" y="-128.159" z="0" diameter="1.2"/>
      </segment>
      <segment id="26" name = "Seg1_dend_11">
        <parent segment="25"/>
        <distal x="-77.8837" y="-174.212" z="0" diameter="1.2"/>
      </segment>
<!-- Section: scacell[0].dend[6] (segmentGroup: dend_6) which has 3 3D points, so 2 segment(s)-->
      <segment id="15" name = "Seg0_dend_6">
        <parent segment="14"/>
        <proximal x="-38.9418" y="112.106" z="0" diameter="2.5"/>
        <distal x="-58.4128" y="158.159" z="0" diameter="2.5"/>
      </segment>
      <segment id="16" name = "Seg1_dend_6">
        <parent segment="15"/>
        <distal x="-77.8837" y="204.212" z="0" diameter="2.5"/>
      </segment>
<!-- Section: scacell[0].dend[1] (segmentGroup: dend_1) which has 3 3D points, so 2 segment(s)-->
      <segment id="5" name = "Seg0_dend_1">
        <parent segment="4"/>
        <proximal x="38.9418" y="112.106" z="0" diameter="2.5"/>
        <distal x="58.4128" y="158.159" z="0" diameter="2.5"/>
      </segment>
      <segment id="6" name = "Seg1_dend_1">
        <parent segment="5"/>
        <distal x="77.8837" y="204.212" z="0" diameter="2.5"/>
      </segment>
<!-- Section: scacell[0].dend[15] (segmentGroup: dend_15) which has 3 3D points, so 2 segment(s)-->
      <segment id="33" name = "Seg0_dend_15">
        <parent segment="32"/>
        <proximal x="77.8837" y="-174.212" z="0" diameter="1"/>
        <distal x="97.3546" y="-220.265" z="0" diameter="1"/>
      </segment>
      <segment id="34" name = "Seg1_dend_15">
        <parent segment="33"/>
        <distal x="116.826" y="-266.318" z="0" diameter="1"/>
      </segment>
<!-- Section: scacell[0].dend[12] (segmentGroup: dend_12) which has 3 3D points, so 2 segment(s)-->
      <segment id="27" name = "Seg0_dend_12">
        <parent segment="26"/>
        <proximal x="-77.8837" y="-174.212" z="0" diameter="1"/>
        <distal x="-97.3546" y="-220.265" z="0" diameter="1"/>
      </segment>
      <segment id="28" name = "Seg1_dend_12">
        <parent segment="27"/>
        <distal x="-116.826" y="-266.318" z="0" diameter="1"/>
      </segment>
<!-- Section: scacell[0].dend[7] (segmentGroup: dend_7) which has 3 3D points, so 2 segment(s)-->
      <segment id="17" name = "Seg0_dend_7">
        <parent segment="16"/>
        <proximal x="-77.8837" y="204.212" z="0" diameter="1.5"/>
        <distal x="-116.826" y="296.318" z="0" diameter="1.5"/>
      </segment>
      <segment id="18" name = "Seg1_dend_7">
        <parent segment="17"/>
        <distal x="-155.767" y="388.424" z="0" diameter="1.5"/>
      </segment>
<!-- Section: scacell[0].dend[2] (segmentGroup: dend_2) which has 3 3D points, so 2 segment(s)-->
      <segment id="7" name = "Seg0_dend_2">
        <parent segment="6"/>
        <proximal x="77.8837" y="204.212" z="0" diameter="1.5"/>
        <distal x="116.826" y="296.318" z="0" diameter="1.5"/>
      </segment>
      <segment id="8" name = "Seg1_dend_2">
        <parent segment="7"/>
        <distal x="155.767" y="388.424" z="0" diameter="1.5"/>
      </segment>
<!-- Section: scacell[0].dend[8] (segmentGroup: dend_8) which has 3 3D points, so 2 segment(s)-->
      <segment id="19" name = "Seg0_dend_8">
        <parent segment="18"/>
        <proximal x="-155.767" y="388.424" z="0" diameter="1.2"/>
        <distal x="-175.238" y="434.477" z="0" diameter="1.2"/>
      </segment>
      <segment id="20" name = "Seg1_dend_8">
        <parent segment="19"/>
        <distal x="-194.709" y="480.531" z="0" diameter="1.2"/>
      </segment>
<!-- Section: scacell[0].dend[3] (segmentGroup: dend_3) which has 3 3D points, so 2 segment(s)-->
      <segment id="9" name = "Seg0_dend_3">
        <parent segment="8"/>
        <proximal x="155.767" y="388.424" z="0" diameter="1.2"/>
        <distal x="175.238" y="434.477" z="0" diameter="1.2"/>
      </segment>
      <segment id="10" name = "Seg1_dend_3">
        <parent segment="9"/>
        <distal x="194.709" y="480.531" z="0" diameter="1.2"/>
      </segment>
<!-- Section: scacell[0].dend[9] (segmentGroup: dend_9) which has 3 3D points, so 2 segment(s)-->
      <segment id="21" name = "Seg0_dend_9">
        <parent segment="20"/>
        <proximal x="-194.709" y="480.531" z="0" diameter="1"/>
        <distal x="-214.18" y="526.584" z="0" diameter="1"/>
      </segment>
      <segment id="22" name = "Seg1_dend_9">
        <parent segment="21"/>
        <distal x="-233.651" y="572.637" z="0" diameter="1"/>
      </segment>
<!-- Section: scacell[0].dend[4] (segmentGroup: dend_4) which has 3 3D points, so 2 segment(s)-->
      <segment id="11" name = "Seg0_dend_4">
        <parent segment="10"/>
        <proximal x="194.709" y="480.531" z="0" diameter="1"/>
        <distal x="214.18" y="526.584" z="0" diameter="1"/>
      </segment>
      <segment id="12" name = "Seg1_dend_4">
        <parent segment="11"/>
        <distal x="233.651" y="572.637" z="0" diameter="1"/>
      </segment>

<!-- Section: scacell[0].soma[0] (segmentGroup: soma_0) which has 3 3D points, so 2 segment(s)-->

      <segmentGroup id = "soma_0"  neuroLexId="sao864921383">
         <notes>This group contains an unbranched set of segments, and all of the segmentGroups marked with
             neuroLexId = sao864921383 form a non-overlapping set of all of the segments.
             These segmentGroups correspond to the 'cables' of NeuroML v1.8.1, and map to/from NEURON sections.</notes>
        <member segment = "0"/>
        <member segment = "2"/>
      </segmentGroup>


<!-- Section: scacell[0].dend[13] (segmentGroup: dend_13) which has 3 3D points, so 2 segment(s)-->

      <segmentGroup id = "dend_13"  neuroLexId="sao864921383">
         <notes>This group contains an unbranched set of segments, and all of the segmentGroups marked with
             neuroLexId = sao864921383 form a non-overlapping set of all of the segments.
             These segmentGroups correspond to the 'cables' of NeuroML v1.8.1, and map to/from NEURON sections.</notes>
        <!-- This is currently inside (old convention) & outside (new convention) the <annotation> element, as some APIs have trouble reading what's inside <annotation> (<xs:any..> in Schema) -->
        <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        <annotation>
          <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        </annotation>
        <member segment = "29"/>
        <member segment = "30"/>
      </segmentGroup>


<!-- Section: scacell[0].dend[10] (segmentGroup: dend_10) which has 3 3D points, so 2 segment(s)-->

      <segmentGroup id = "dend_10"  neuroLexId="sao864921383">
         <notes>This group contains an unbranched set of segments, and all of the segmentGroups marked with
             neuroLexId = sao864921383 form a non-overlapping set of all of the segments.
             These segmentGroups correspond to the 'cables' of NeuroML v1.8.1, and map to/from NEURON sections.</notes>
        <!-- This is currently inside (old convention) & outside (new convention) the <annotation> element, as some APIs have trouble reading what's inside <annotation> (<xs:any..> in Schema) -->
        <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        <annotation>
          <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        </annotation>
        <member segment = "23"/>
        <member segment = "24"/>
      </segmentGroup>


<!-- Section: scacell[0].dend[5] (segmentGroup: dend_5) which has 3 3D points, so 2 segment(s)-->

      <segmentGroup id = "dend_5"  neuroLexId="sao864921383">
         <notes>This group contains an unbranched set of segments, and all of the segmentGroups marked with
             neuroLexId = sao864921383 form a non-overlapping set of all of the segments.
             These segmentGroups correspond to the 'cables' of NeuroML v1.8.1, and map to/from NEURON sections.</notes>
        <!-- This is currently inside (old convention) & outside (new convention) the <annotation> element, as some APIs have trouble reading what's inside <annotation> (<xs:any..> in Schema) -->
        <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        <annotation>
          <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        </annotation>
        <member segment = "13"/>
        <member segment = "14"/>
      </segmentGroup>


<!-- Section: scacell[0].dend[0] (segmentGroup: dend_0) which has 3 3D points, so 2 segment(s)-->

      <segmentGroup id = "dend_0"  neuroLexId="sao864921383">
         <notes>This group contains an unbranched set of segments, and all of the segmentGroups marked with
             neuroLexId = sao864921383 form a non-overlapping set of all of the segments.
             These segmentGroups correspond to the 'cables' of NeuroML v1.8.1, and map to/from NEURON sections.</notes>
        <!-- This is currently inside (old convention) & outside (new convention) the <annotation> element, as some APIs have trouble reading what's inside <annotation> (<xs:any..> in Schema) -->
        <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        <annotation>
          <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        </annotation>
        <member segment = "3"/>
        <member segment = "4"/>
      </segmentGroup>


<!-- Section: scacell[0].dend[14] (segmentGroup: dend_14) which has 3 3D points, so 2 segment(s)-->

      <segmentGroup id = "dend_14"  neuroLexId="sao864921383">
         <notes>This group contains an unbranched set of segments, and all of the segmentGroups marked with
             neuroLexId = sao864921383 form a non-overlapping set of all of the segments.
             These segmentGroups correspond to the 'cables' of NeuroML v1.8.1, and map to/from NEURON sections.</notes>
        <!-- This is currently inside (old convention) & outside (new convention) the <annotation> element, as some APIs have trouble reading what's inside <annotation> (<xs:any..> in Schema) -->
        <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        <annotation>
          <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        </annotation>
        <member segment = "31"/>
        <member segment = "32"/>
      </segmentGroup>


<!-- Section: scacell[0].dend[11] (segmentGroup: dend_11) which has 3 3D points, so 2 segment(s)-->

      <segmentGroup id = "dend_11"  neuroLexId="sao864921383">
         <notes>This group contains an unbranched set of segments, and all of the segmentGroups marked with
             neuroLexId = sao864921383 form a non-overlapping set of all of the segments.
             These segmentGroups correspond to the 'cables' of NeuroML v1.8.1, and map to/from NEURON sections.</notes>
        <!-- This is currently inside (old convention) & outside (new convention) the <annotation> element, as some APIs have trouble reading what's inside <annotation> (<xs:any..> in Schema) -->
        <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        <annotation>
          <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        </annotation>
        <member segment = "25"/>
        <member segment = "26"/>
      </segmentGroup>


<!-- Section: scacell[0].dend[6] (segmentGroup: dend_6) which has 3 3D points, so 2 segment(s)-->

      <segmentGroup id = "dend_6"  neuroLexId="sao864921383">
         <notes>This group contains an unbranched set of segments, and all of the segmentGroups marked with
             neuroLexId = sao864921383 form a non-overlapping set of all of the segments.
             These segmentGroups correspond to the 'cables' of NeuroML v1.8.1, and map to/from NEURON sections.</notes>
        <!-- This is currently inside (old convention) & outside (new convention) the <annotation> element, as some APIs have trouble reading what's inside <annotation> (<xs:any..> in Schema) -->
        <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        <annotation>
          <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        </annotation>
        <member segment = "15"/>
        <member segment = "16"/>
      </segmentGroup>


<!-- Section: scacell[0].dend[1] (segmentGroup: dend_1) which has 3 3D points, so 2 segment(s)-->

      <segmentGroup id = "dend_1"  neuroLexId="sao864921383">
         <notes>This group contains an unbranched set of segments, and all of the segmentGroups marked with
             neuroLexId = sao864921383 form a non-overlapping set of all of the segments.
             These segmentGroups correspond to the 'cables' of NeuroML v1.8.1, and map to/from NEURON sections.</notes>
        <!-- This is currently inside (old convention) & outside (new convention) the <annotation> element, as some APIs have trouble reading what's inside <annotation> (<xs:any..> in Schema) -->
        <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        <annotation>
          <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        </annotation>
        <member segment = "5"/>
        <member segment = "6"/>
      </segmentGroup>


<!-- Section: scacell[0].dend[15] (segmentGroup: dend_15) which has 3 3D points, so 2 segment(s)-->

      <segmentGroup id = "dend_15"  neuroLexId="sao864921383">
         <notes>This group contains an unbranched set of segments, and all of the segmentGroups marked with
             neuroLexId = sao864921383 form a non-overlapping set of all of the segments.
             These segmentGroups correspond to the 'cables' of NeuroML v1.8.1, and map to/from NEURON sections.</notes>
        <!-- This is currently inside (old convention) & outside (new convention) the <annotation> element, as some APIs have trouble reading what's inside <annotation> (<xs:any..> in Schema) -->
        <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        <annotation>
          <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        </annotation>
        <member segment = "33"/>
        <member segment = "34"/>
      </segmentGroup>


<!-- Section: scacell[0].dend[12] (segmentGroup: dend_12) which has 3 3D points, so 2 segment(s)-->

      <segmentGroup id = "dend_12"  neuroLexId="sao864921383">
         <notes>This group contains an unbranched set of segments, and all of the segmentGroups marked with
             neuroLexId = sao864921383 form a non-overlapping set of all of the segments.
             These segmentGroups correspond to the 'cables' of NeuroML v1.8.1, and map to/from NEURON sections.</notes>
        <!-- This is currently inside (old convention) & outside (new convention) the <annotation> element, as some APIs have trouble reading what's inside <annotation> (<xs:any..> in Schema) -->
        <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        <annotation>
          <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        </annotation>
        <member segment = "27"/>
        <member segment = "28"/>
      </segmentGroup>


<!-- Section: scacell[0].dend[7] (segmentGroup: dend_7) which has 3 3D points, so 2 segment(s)-->

      <segmentGroup id = "dend_7"  neuroLexId="sao864921383">
         <notes>This group contains an unbranched set of segments, and all of the segmentGroups marked with
             neuroLexId = sao864921383 form a non-overlapping set of all of the segments.
             These segmentGroups correspond to the 'cables' of NeuroML v1.8.1, and map to/from NEURON sections.</notes>
        <!-- This is currently inside (old convention) & outside (new convention) the <annotation> element, as some APIs have trouble reading what's inside <annotation> (<xs:any..> in Schema) -->
        <property tag="numberInternalDivisions" value="5"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        <annotation>
          <property tag="numberInternalDivisions" value="5"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        </annotation>
        <member segment = "17"/>
        <member segment = "18"/>
      </segmentGroup>


<!-- Section: scacell[0].dend[2] (segmentGroup: dend_2) which has 3 3D points, so 2 segment(s)-->

      <segmentGroup id = "dend_2"  neuroLexId="sao864921383">
         <notes>This group contains an unbranched set of segments, and all of the segmentGroups marked with
             neuroLexId = sao864921383 form a non-overlapping set of all of the segments.
             These segmentGroups correspond to the 'cables' of NeuroML v1.8.1, and map to/from NEURON sections.</notes>
        <!-- This is currently inside (old convention) & outside (new convention) the <annotation> element, as some APIs have trouble reading what's inside <annotation> (<xs:any..> in Schema) -->
        <property tag="numberInternalDivisions" value="5"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        <annotation>
          <property tag="numberInternalDivisions" value="5"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        </annotation>
        <member segment = "7"/>
        <member segment = "8"/>
      </segmentGroup>


<!-- Section: scacell[0].dend[8] (segmentGroup: dend_8) which has 3 3D points, so 2 segment(s)-->

      <segmentGroup id = "dend_8"  neuroLexId="sao864921383">
         <notes>This group contains an unbranched set of segments, and all of the segmentGroups marked with
             neuroLexId = sao864921383 form a non-overlapping set of all of the segments.
             These segmentGroups correspond to the 'cables' of NeuroML v1.8.1, and map to/from NEURON sections.</notes>
        <!-- This is currently inside (old convention) & outside (new convention) the <annotation> element, as some APIs have trouble reading what's inside <annotation> (<xs:any..> in Schema) -->
        <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        <annotation>
          <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        </annotation>
        <member segment = "19"/>
        <member segment = "20"/>
      </segmentGroup>


<!-- Section: scacell[0].dend[3] (segmentGroup: dend_3) which has 3 3D points, so 2 segment(s)-->

      <segmentGroup id = "dend_3"  neuroLexId="sao864921383">
         <notes>This group contains an unbranched set of segments, and all of the segmentGroups marked with
             neuroLexId = sao864921383 form a non-overlapping set of all of the segments.
             These segmentGroups correspond to the 'cables' of NeuroML v1.8.1, and map to/from NEURON sections.</notes>
        <!-- This is currently inside (old convention) & outside (new convention) the <annotation> element, as some APIs have trouble reading what's inside <annotation> (<xs:any..> in Schema) -->
        <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        <annotation>
          <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        </annotation>
        <member segment = "9"/>
        <member segment = "10"/>
      </segmentGroup>


<!-- Section: scacell[0].dend[9] (segmentGroup: dend_9) which has 3 3D points, so 2 segment(s)-->

      <segmentGroup id = "dend_9"  neuroLexId="sao864921383">
         <notes>This group contains an unbranched set of segments, and all of the segmentGroups marked with
             neuroLexId = sao864921383 form a non-overlapping set of all of the segments.
             These segmentGroups correspond to the 'cables' of NeuroML v1.8.1, and map to/from NEURON sections.</notes>
        <!-- This is currently inside (old convention) & outside (new convention) the <annotation> element, as some APIs have trouble reading what's inside <annotation> (<xs:any..> in Schema) -->
        <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        <annotation>
          <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        </annotation>
        <member segment = "21"/>
        <member segment = "22"/>
      </segmentGroup>


<!-- Section: scacell[0].dend[4] (segmentGroup: dend_4) which has 3 3D points, so 2 segment(s)-->

      <segmentGroup id = "dend_4"  neuroLexId="sao864921383">
         <notes>This group contains an unbranched set of segments, and all of the segmentGroups marked with
             neuroLexId = sao864921383 form a non-overlapping set of all of the segments.
             These segmentGroups correspond to the 'cables' of NeuroML v1.8.1, and map to/from NEURON sections.</notes>
        <!-- This is currently inside (old convention) & outside (new convention) the <annotation> element, as some APIs have trouble reading what's inside <annotation> (<xs:any..> in Schema) -->
        <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        <annotation>
          <property tag="numberInternalDivisions" value="3"/> <!-- Discretization of model at time of export from NEURON. Can be overridden by importing application -->
        </annotation>
        <member segment = "11"/>
        <member segment = "12"/>
      </segmentGroup>

      <segmentGroup id="all"> <!-- Replacing subset name ModelViewParmSubset_0 with all, as it contains all sections -->
        <include segmentGroup = "soma_0"/>
        <include segmentGroup = "dend_13"/>
        <include segmentGroup = "dend_10"/>
        <include segmentGroup = "dend_5"/>
        <include segmentGroup = "dend_0"/>
        <include segmentGroup = "dend_14"/>
        <include segmentGroup = "dend_11"/>
        <include segmentGroup = "dend_6"/>
        <include segmentGroup = "dend_1"/>
        <include segmentGroup = "dend_15"/>
        <include segmentGroup = "dend_12"/>
        <include segmentGroup = "dend_7"/>
        <include segmentGroup = "dend_2"/>
        <include segmentGroup = "dend_8"/>
        <include segmentGroup = "dend_3"/>
        <include segmentGroup = "dend_9"/>
        <include segmentGroup = "dend_4"/>
      </segmentGroup>

      <segmentGroup id="soma_group"> 
        <include segmentGroup = "soma_0"/>
      </segmentGroup>

      <segmentGroup id="dendrite_group"> 
        <include segmentGroup = "dend_13"/>
        <include segmentGroup = "dend_10"/>
        <include segmentGroup = "dend_5"/>
        <include segmentGroup = "dend_0"/>
        <include segmentGroup = "dend_14"/>
        <include segmentGroup = "dend_11"/>
        <include segmentGroup = "dend_6"/>
        <include segmentGroup = "dend_1"/>
        <include segmentGroup = "dend_15"/>
        <include segmentGroup = "dend_12"/>
        <include segmentGroup = "dend_7"/>
        <include segmentGroup = "dend_2"/>
        <include segmentGroup = "dend_8"/>
        <include segmentGroup = "dend_3"/>
        <include segmentGroup = "dend_9"/>
        <include segmentGroup = "dend_4"/>
        
        <inhomogeneousParameter id="PathLengthOverDendrites" variable="p" metric="Path Length from root">
        </inhomogeneousParameter>
      </segmentGroup>

    </morphology>

    <!-- Biophysical properties -->

    <biophysicalProperties id="biophys"> 

      <membraneProperties> 

        <channelDensityGHK2 ionChannel="CavL" id="CavL_all" condDensity="1mS_per_cm2" segmentGroup="all" ion="ca"/>
        <channelDensityNernst ionChannel="CavN" id="CavN_all" condDensity="0.02mS_per_cm2" segmentGroup="all" ion="ca"/>
        <channelDensity ionChannel="HCN" id="HCN_all" condDensity="0.07mS_per_cm2" segmentGroup="all" erev="0mV" ion="non_speific"/> <!-- TODO: check if e=0 makes sense or not?! -->
        <channelDensity ionChannel="KCaS" id="KCaS_all" condDensity="0.001mS_per_cm2" segmentGroup="all" erev="-90mV" ion="k"/>
        <channelDensity ionChannel="Kdrfast" id="Kdrfast_soma" condDensity="0.006mS_per_cm2" segmentGroup="soma_group" erev="-90mV" ion="k"/>
        <channelDensity ionChannel="KvA" id="KvA_all" condDensity="0.1mS_per_cm2" segmentGroup="all" erev="-90mV" ion="k"/>
        <channelDensity ionChannel="KvCaB" id="KvCaB_all" condDensity="0.007mS_per_cm2" segmentGroup="all" erev="-90mV" ion="k"/>
        <channelDensity ionChannel="KvGroup" id="KvGroup_soma" condDensity="1.1mS_per_cm2" segmentGroup="soma_group" erev="-90mV" ion="k"/>
        <channelDensity ionChannel="Navcck" id="Navcck_soma" condDensity="40mS_per_cm2" segmentGroup="soma_group" erev="55mV" ion="na"/>
        <channelDensity ionChannel="leak_chan" id="leak_all" condDensity="0.0285714mS_per_cm2" segmentGroup="all" erev="-72mV" ion="non_specific"/>
        <!-- Kdrfast with param: gmax = f(p) = H(100 - p) * 0.06 mS/cm2 on ParameterisedGroup: PathLengthOverDendrites on: dendrite_group with metric: Path Length from root (NO_TRANSLATION, NO_NORMALISATION), var: p-->
        <channelDensityNonUniform ionChannel="Kdrfast" id="Kdrfast_dendrite" erev="-90mV" ion="k">
            <variableParameter parameter="condDensity" segmentGroup="dendrite_group">   
                <inhomogeneousValue inhomogeneousParameter="PathLengthOverDendrites" value="H(100 - p) * 0.6"/> 
            </variableParameter>
        </channelDensityNonUniform>
        <!-- KvGroup with param: gmax = f(p) = H(100 - p) * 2.2 mS/cm2 on ParameterisedGroup: PathLengthOverDendrites on: dendrite_group with metric: Path Length from root (NO_TRANSLATION, NO_NORMALISATION), var: p-->
        <channelDensityNonUniform ionChannel="KvGroup" id="KvGroup_dendrite" erev="-90mV" ion="k">
            <variableParameter parameter="condDensity" segmentGroup="dendrite_group">    
                <inhomogeneousValue inhomogeneousParameter="PathLengthOverDendrites" value="H(100 - p) * 22"/> 
            </variableParameter>
        </channelDensityNonUniform>
        <!-- Navcck with param: gmax = f(p) = H(100 - p) * 20 mS/cm2 on ParameterisedGroup: PathLengthOverDendrites on: dendrite_group with metric: Path Length from root (NO_TRANSLATION, NO_NORMALISATION), var: p-->
        <channelDensityNonUniform ionChannel="Navcck" id="Navcck_dendrite" erev="50mV" ion="na">
            <variableParameter parameter="condDensity" segmentGroup="dendrite_group"> 
                <inhomogeneousValue inhomogeneousParameter="PathLengthOverDendrites" value="H(100 - p) * 200"/> 
            </variableParameter>
        </channelDensityNonUniform>
        
        
        <spikeThresh value="0mV"/>
        
        <specificCapacitance value="1.2uF_per_cm2"/>
        
        <initMembPotential value="-65.0mV"/>

      </membraneProperties>  

      <intracellularProperties>
          
        <!-- Intracellular Calcium dynamics -->
        
        <species id="ca" ion="ca" concentrationModel="Capool"
                 initialConcentration="5e-5 mM" initialExtConcentration="2 mM"/> <!-- initialConcentration="5e-5 mM" is not used from here ... but it's the same value in Capool.nml -András -->

        <resistivity value="0.15 kohm_cm" />

      </intracellularProperties>

    </biophysicalProperties>

  </cell> 
 
</neuroml>
